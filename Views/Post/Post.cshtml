@model ForumsUnknown.Models.PostCommentsViewModel

@{
    ViewBag.Title = "Post";
}
<div>
    <div class="container">
        <p>
            @Html.ActionLink("Back", "Index", "Home", null, htmlAttributes: new { @class = "btn btn-outline-light" })
        </p>
        <div class="card bg-transparent mt-1 text-light">
            <h1 class="card-title display-2">@Model.ForumPost.Title</h1>
            <h5 class="card-subtitle text-secondary">by <span class="text-danger">@Model.ForumPost.AuthorName</span></h5>
            <hr class="w-25" />
            <div class="card-body">
                @if (Model.ForumPost.Images != null && Model.ForumPost.Images.Any())
                {
                    <div class="col-sm-4 h-25">
                        <div id="carouselExampleControls" class="carousel slide" data-bs-interval="false">
                            <div class="carousel-inner">
                                @{ int count = 0; }
                                @foreach (var image in Model.ForumPost.Images)
                                {
                                    if (count == 0)
                                    {
                                        <div class="carousel-item active">
                                            <img src="@image.ImagePath" class="d-block w-100 img-fluid" alt="@image.AltText" height="50">
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="carousel-item">
                                            <img src="@image.ImagePath" class="d-block w-100 img-fluid" alt="@image.AltText">
                                        </div>
                                    }
                                    count++;
                                }
                            </div>
                            @if (Model.ForumPost.Images.Count > 1)
                            {
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            }
                        </div>
                    </div>
                    
                }
                <br />
                <h4>@Model.ForumPost.Content</h4>
            </div>
            @{
                //string dateCreated = Model.ForumPost.CreatedAt?.ToString("MMMM dd yyyy hh:mm tt");
                string dateCreated = Model.ForumPost.CreatedAt?.ToString("o");
            }
            <br />
            <p class="text-secondary created-at" data-created-at="@dateCreated"></p>
            <div class="comment-section mt-1">
                <p> @ViewBag.CommentCount Comments</p>
                @using (Html.BeginForm("CreateComment", "Post", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="card bg-transparent col-md-6">
                        <div class="card-body p-0">
                            @Html.TextAreaFor(model => model.Comment.Content, htmlAttributes: new { @class = "form-control-sm bg-transparent text-white w-100 border-0 border-bottom rounded-0 pl-5 pb-0", placeholder = "Add a comment..." })
                            @Html.ValidationMessageFor(model => model.Comment.Content, "", new { @class = "text-danger" })
                            <br />
                            <div class="form-group d-flex justify-content-end">
                                @Html.HiddenFor(model => model.Comment.AuthorID, new { Value = Session["UserId"] })
                                @Html.HiddenFor(model => model.Comment.PostID, new { Value = Model.ForumPost.PostID })
                                <input type="reset" value="Cancel" class="btn btn-sm btn-outline-light m-0 mx-2" />
                                <input type="submit" value="Comment" class="btn btn-sm btn-dark w-0" />
                            </div>
                        </div>
                    </div>
                }
                <br />
                <!--for each existing comment, sort by newest-->
                @foreach (var comment in Model.Comments)
                {
                    //string commentCreatedAt = comment.CreatedAt?.ToString("MMMM dd yyyy hh:mm tt");
                    string commentCreatedAt = comment.CreatedAt?.ToString("o");
                    string author = comment.AuthorName.ToString();
                    <div class="comment-row mb-1 py-0">
                        <div class="card bg-transparent border border-3 border-light">
                            <div class="card-body">
                                <a class="text-danger mb-0 text-decoration-none" href="@Url.Action("ViewProfile","User", new { username = author})">
                                    @if (comment.ProfilePicPath != null)
                                    {
                                        <img src="@comment.ProfilePicPath" style="width: 30px;height: 30px; overflow:hidden; object-fit: cover;" class="rounded-circle"/>
                                    }
                                    @author
                                </a>
                                <h6 class="mt-3">@comment.Content</h6>
                                <p class="mb-0 text-secondary created-at" data-created-at="@commentCreatedAt">@comment.CreatedAt</p>
                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>
        
    </div>
</div>

